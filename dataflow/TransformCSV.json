{
	"name": "TransformCSV",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dataflowSource",
						"type": "DatasetReference"
					},
					"name": "sourceCSV"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "selectCols"
				},
				{
					"name": "filterRows"
				},
				{
					"name": "Visa"
				},
				{
					"name": "derivedColumn"
				},
				{
					"name": "aggregate"
				}
			],
			"scriptLines": [
				"source(output(",
				"          transaction_id as short,",
				"          transactional_date as timestamp,",
				"          product_id as string,",
				"          customer_id as short,",
				"          payment as string,",
				"          credit_card as long,",
				"          loyalty_card as boolean,",
				"          cost as double,",
				"          quantity as short,",
				"          price as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceCSV",
				"sourceCSV select(mapColumn(",
				"          transaction_id,",
				"          transactional_date,",
				"          product_id,",
				"          customer_id,",
				"          payment,",
				"          price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCols",
				"selectCols filter(customer_id != 12) ~> filterRows",
				"filterRows split(payment=='visa',",
				"     payment == 'mastercard',",
				"     disjoint: false) ~> Visa@(visa, mastercard, otherThanVisa)",
				"Visa@otherThanVisa derive(payment = coalesce(payment,'N/A')) ~> derivedColumn",
				"Visa@visa aggregate() ~> aggregate"
			]
		}
	}
}